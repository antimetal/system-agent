name: Build & Test

# This workflow runs CI checks & integration tests across multiple environments to ensure
# compatibility with different Linux kernel versions and system configurations.

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Extract golangci-lint version
      id: lint-version
      run: echo "version=$(grep 'GOLANGCI_LINT_VERSION ?=' Makefile | cut -d'=' -f2 | tr -d ' ')" >> $GITHUB_OUTPUT

    - name: Cache tool binaries
      uses: actions/cache@v4
      with:
        path: bin/
        key: ${{ runner.os }}-tools-${{ hashFiles('Makefile') }}-golangci-lint-${{ steps.lint-version.outputs.version }}
        restore-keys: |
          ${{ runner.os }}-tools-${{ hashFiles('Makefile') }}-
          ${{ runner.os }}-tools-

    - name: Cache buf modules and generated files
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/buf
          pkg/api/**/*.pb.go
        key: ${{ runner.os }}-buf-${{ hashFiles('buf.gen.yaml') }}
        restore-keys: |
          ${{ runner.os }}-buf-

    - name: Run linting
      run: make lint

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Run license check
      run: make license-check

  gen-check:
    name: Generation Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-gen-check-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-gen-check-

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev

    - name: Check generated files are up to date
      run: make gen-check

  build-agent:
    name: Build Agent Binary - ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-${{ matrix.arch }}-apt-build-agent-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-apt-build-agent-

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev

    - name: Build agent binary
      run: make build

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Run unit tests
      run: |
        set -o pipefail
        echo "Running unit tests (excluding integration tests)..."
        make test-unit 2>&1 | tee unit-test-results.txt

        echo "" >> unit-test-results.txt
        echo "=== Test Summary ===" >> unit-test-results.txt
        echo "Time: $(date)" >> unit-test-results.txt
        
        # Display coverage summary
        if [ -f coverage/coverage-unit.out ]; then
          echo "" >> unit-test-results.txt
          echo "=== Coverage Summary ===" >> unit-test-results.txt
          go tool cover -func=coverage/coverage-unit.out | tail -n 5 >> unit-test-results.txt
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: unit-test-results.txt
        retention-days: 7
        if-no-files-found: warn

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-coverage
        path: coverage/coverage-unit.out
        retention-days: 30
        if-no-files-found: warn

  # Build artifacts separately to avoid rebuilding for each kernel version.
  # This job creates eBPF programs and test scripts once, then all integration
  # test jobs can download and use the same artifacts.
  build-artifacts:
    name: Build Test Artifacts
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-build-artifacts-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-build-artifacts-

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev

    - name: Generate code
      run: |
        echo "Running code generation..."
        make generate

    - name: Build test artifacts
      run: .github/workflows/scripts/build-test-artifacts.sh

    - name: Package artifacts
      run: .github/workflows/scripts/package-artifacts.sh

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: artifacts/
        retention-days: 7

  integration-tests-vm:
    name: Integration Tests - Kernel ${{ matrix.kernel }}
    needs: build-artifacts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - kernel: "5.4-20250616.013250"   # Ubuntu 20.04 LTS
          - kernel: "5.10-20250616.013250"
          - kernel: "5.15-20250616.013250"  # Ubuntu 22.04 LTS
          - kernel: "6.1-20250616.013250"   # LTS kernel
          - kernel: "6.6-20250616.013250"   # Current LTS kernel
          - kernel: "6.12-20250805.082402"  # Next LTS kernel (6.12)

    steps:
    - uses: actions/checkout@v4

    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-artifacts
        path: artifacts/

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: go.sum

    - name: Run tests in VM using LVH Action
      uses: cilium/little-vm-helper@main
      with:
        test-name: "ebpf-integration"
        image-version: ${{ matrix.kernel }}
        host-mount: .
        install-dependencies: true
        cpu: 4
        mem: "8G"
        cmd: |
          # Make script executable and run it from the mounted host directory
          cd /host
          chmod +x .github/workflows/scripts/run-lvh-tests.sh
          GO_VERSION=1.24.0 KERNEL_VERSION="${{ matrix.kernel }}" .github/workflows/scripts/run-lvh-tests.sh

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.kernel }}
        path: |
          *-test-results.txt
          vm-output.log
        retention-days: 7
        if-no-files-found: warn

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests-vm]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find test-results -type f -name "*.txt" -o -name "*.log" -o -name "*.out" | sort

    - name: Generate summary
      run: .github/workflows/scripts/generate-test-summary.sh test-results

    - name: Merge coverage reports
      if: always()
      run: |
        # Find all coverage files
        UNIT_COV=$(find test-results -name "coverage-unit.out" -type f | head -1)
        INT_COV=$(find test-results -name "coverage-integration.out" -type f | head -1)
        
        if [ -n "$UNIT_COV" ] || [ -n "$INT_COV" ]; then
          mkdir -p coverage
          
          # If we have both, merge them
          if [ -n "$UNIT_COV" ] && [ -n "$INT_COV" ]; then
            echo "Merging unit and integration coverage..."
            go install github.com/wadey/gocovmerge@latest
            $(go env GOPATH)/bin/gocovmerge "$UNIT_COV" "$INT_COV" > coverage/coverage-all.out
            
            # Generate summary
            echo "Combined coverage:"
            go tool cover -func=coverage/coverage-all.out | tail -n 1
            
            # Generate HTML report
            go tool cover -html=coverage/coverage-all.out -o coverage/coverage-all.html
            
            # Copy individual files too
            cp "$UNIT_COV" coverage/
            [ -n "$INT_COV" ] && cp "$INT_COV" coverage/
            
          elif [ -n "$UNIT_COV" ]; then
            # Only unit tests available
            cp "$UNIT_COV" coverage/coverage-all.out
            cp "$UNIT_COV" coverage/coverage-unit.out
            go tool cover -html=coverage/coverage-all.out -o coverage/coverage-all.html
          fi
          
          # Generate coverage summary file
          echo "# Coverage Summary" > coverage/COVERAGE.md
          echo "" >> coverage/COVERAGE.md
          echo "Generated: $(date)" >> coverage/COVERAGE.md
          echo "" >> coverage/COVERAGE.md
          
          if [ -f coverage/coverage-unit.out ]; then
            UNIT_PCT=$(go tool cover -func=coverage/coverage-unit.out | grep "^total:" | awk '{print $3}')
            echo "## Unit Test Coverage: $UNIT_PCT" >> coverage/COVERAGE.md
          fi
          
          if [ -n "$INT_COV" ] && [ -f "$INT_COV" ]; then
            INT_PCT=$(go tool cover -func="$INT_COV" | grep "^total:" | awk '{print $3}')
            echo "## Integration Test Coverage: $INT_PCT" >> coverage/COVERAGE.md
          fi
          
          if [ -f coverage/coverage-all.out ]; then
            TOTAL_PCT=$(go tool cover -func=coverage/coverage-all.out | grep "^total:" | awk '{print $3}')
            echo "## **Total Coverage: $TOTAL_PCT**" >> coverage/COVERAGE.md
          fi
          
          echo "" >> coverage/COVERAGE.md
          echo "📊 View \`coverage-all.html\` for detailed line-by-line coverage" >> coverage/COVERAGE.md
        fi

    - name: Upload combined coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-combined
        path: coverage/
        retention-days: 30
        if-no-files-found: ignore
