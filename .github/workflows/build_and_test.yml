name: Build & Test

# This workflow runs CI checks & integration tests across multiple environments to ensure
# compatibility with different Linux kernel versions and system configurations.

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-lint-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-lint-

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev

    - name: Run linting
      run: make lint

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Run license check
      run: make license-check

  gen-check:
    name: Generation Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-gen-check-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-gen-check-

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev

    - name: Check generated files are up to date
      run: make gen-check

  build-agent:
    name: Build Agent Binary - ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-${{ matrix.arch }}-apt-build-agent-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-apt-build-agent-

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev

    - name: Build agent binary
      run: make build

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum
    
    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-unit-tests-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-unit-tests-
    
    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev
    
    - name: Run unit tests
      run: |
        echo "Running unit tests with coverage (excluding integration tests)..."
        # Run tests with coverage and save results (generate is a dependency of test-unit)
        make test-unit 2>&1 | tee unit-test-results.txt
        
        # Generate coverage summary
        echo "" >> unit-test-results.txt
        echo "=== Test Summary ===" >> unit-test-results.txt
        echo "Time: $(date)" >> unit-test-results.txt
        
        # Show coverage summary (cover.out is the file created by make test-unit)
        if [ -f cover.out ]; then
          echo "Coverage report generated successfully"
          go tool cover -func=cover.out | tail -5
        else
          echo "Warning: No coverage report generated"
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: unit-test-results.txt
        retention-days: 7
        if-no-files-found: warn
    
    - name: Generate coverage HTML
      if: always()
      run: |
        if [ -f cover.out ]; then
          echo "Generating HTML coverage report..."
          go tool cover -html=cover.out -o coverage.html
          echo "HTML coverage report generated"
        fi
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          cover.out
          coverage.html
        retention-days: 7
        if-no-files-found: warn

  # Build artifacts separately to avoid rebuilding for each kernel version.
  # This job creates eBPF programs and test scripts once, then all integration
  # test jobs can download and use the same artifacts.
  build-artifacts:
    name: Build Test Artifacts
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true
        cache-dependency-path: go.sum
    
    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-build-artifacts-${{ hashFiles('.github/workflows/build_and_test.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-build-artifacts-
    
    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq clang llvm libelf-dev libbpf-dev
    
    - name: Generate code
      run: |
        echo "Running code generation..."
        make generate
    
    - name: Build eBPF programs
      run: .github/workflows/scripts/build-ebpf.sh
    
    - name: Package artifacts
      run: .github/workflows/scripts/package-artifacts.sh
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts
        path: artifacts/
        retention-days: 7

  integration-tests-vm:
    name: Integration Tests - Kernel ${{ matrix.kernel }}
    needs: build-artifacts
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - kernel: "5.4-20250616.013250"   # Ubuntu 20.04 LTS
          - kernel: "5.10-20250616.013250"
          - kernel: "5.15-20250616.013250"  # Ubuntu 22.04 LTS
          - kernel: "6.1-20250616.013250"   # LTS kernel
          - kernel: "6.6-20250616.013250"   # Current LTS kernel
          - kernel: "6.12-20250805.082402"  # Next LTS kernel (6.12)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-artifacts
        path: artifacts/
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: go.sum
    
    - name: Run tests in VM using LVH Action
      uses: cilium/little-vm-helper@main
      with:
        test-name: "ebpf-integration"
        image-version: ${{ matrix.kernel }}
        host-mount: .
        install-dependencies: true
        cpu: 4
        mem: "8G"
        cmd: |
          # Make script executable and run it from the mounted host directory
          cd /host
          chmod +x .github/workflows/scripts/run-lvh-tests.sh
          GO_VERSION=1.24.0 KERNEL_VERSION="${{ matrix.kernel }}" .github/workflows/scripts/run-lvh-tests.sh

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.kernel }}
        path: |
          *-test-results.txt
          vm-output.log
        retention-days: 7
        if-no-files-found: warn

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests-vm]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: test-results/

    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find test-results -type f -name "*.txt" -o -name "*.log" | sort

    - name: Generate summary
      run: .github/workflows/scripts/generate-test-summary.sh test-results
