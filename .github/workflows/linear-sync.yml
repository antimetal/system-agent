name: Linear Sync
description: Synchronizes GitHub issues with Linear tasks - creates Linear issues when GitHub issues are opened

on:
  issues:
    types: [opened, closed, reopened]

jobs:
  create-linear-issue:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
    - name: Create Linear Issue
      env:
        ISSUE_BODY: ${{ github.event.issue.body }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_URL: ${{ github.event.issue.html_url }}
        LINEAR_TEAM_ID: ${{ vars.LINEAR_TEAM_ID }}
      run: |
        # Validate required variables
        if [ -z "$LINEAR_TEAM_ID" ]; then
          echo "ERROR: LINEAR_TEAM_ID variable is not set"
          echo "Please configure LINEAR_TEAM_ID in your repository variables"
          exit 1
        fi
        
        if [ -z "${{ secrets.LINEAR_API_TOKEN }}" ]; then
          echo "ERROR: LINEAR_API_TOKEN secret is not set"
          echo "Please configure LINEAR_API_TOKEN in your repository secrets"
          exit 1
        fi
        
        # Build the full description using environment variables
        DESCRIPTION="GitHub Issue: $ISSUE_URL
        
        $ISSUE_BODY"
        
        # Use jq to build the GraphQL query with proper JSON escaping
        QUERY=$(jq -n \
          --arg title "$ISSUE_TITLE" \
          --arg desc "$DESCRIPTION" \
          --arg teamId "$LINEAR_TEAM_ID" \
          '{ query: ("mutation { issueCreate(input: { title: " + ($title | @json) + ", description: " + ($desc | @json) + ", teamId: " + ($teamId | @json) + " }) { issue { identifier url } } }") }')
        
        # Create Linear issue via GraphQL API
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: ${{ secrets.LINEAR_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "$QUERY" \
          https://api.linear.app/graphql)
        
        # Check for errors
        if echo "$RESPONSE" | jq -e '.errors' > /dev/null; then
          echo "Error creating Linear issue:"
          echo "$RESPONSE" | jq '.errors'
          exit 1
        fi
        
        # Output success info
        if echo "$RESPONSE" | jq -e '.data.issueCreate.issue' > /dev/null; then
          echo "Linear issue created successfully:"
          echo "$RESPONSE" | jq '.data.issueCreate.issue'
        else
          echo "Unexpected response format. Full response:"
          echo "$RESPONSE"
          exit 1
        fi
          
  update-linear-issue:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' || github.event.action == 'reopened'
    
    steps:
    - name: Update Linear Issue Status
      run: |
        # Find Linear issue by GitHub URL and update status
        # This requires parsing the issue body to find the Linear issue ID
        echo "GitHub issue ${{ github.event.issue.number }} was ${{ github.event.action }}"
        # Implementation would query Linear API to find matching issue and update status