// Antimetal API definitions
// Copyright Antimetal, Inc. All rights reserved.
//
// Use of this source code and APIs are governed by a source available license that can be found in
// the LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: service/resource/v1/intake.proto

package resourcev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntakeService_Delta_FullMethodName = "/service.resource.v1.IntakeService/Delta"
)

// IntakeServiceClient is the client API for IntakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IntakeService is used to create, update, and delete infrastructure graph
// objects. The Service ingests Resources/Relationships from various sources.
// Delta() allows clients to stream in changes to the infrastructure graph.
//
// Objects can have a TTL set, which defines the lifetime of the object.
// It is used to clean up objects in the graph in the event of client failure
// to ensure that the state of the graph represents to most current view of the
// infrastructure. The TTL can be refreshed by sending a "Hearbeat" Delta
// operation containing objects whose TTLs are to be refreshed.
//
// Objects also contain a delta_version that is used to keep track of the state
// of individual objects. The version is set and maintained by the client
// sending Deltas. When sending heartbeat Deltas, to refresh the object, the
// client uses the delta_version of the last known change to the Object.
type IntakeServiceClient interface {
	Delta(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DeltaRequest, DeltaResponse], error)
}

type intakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntakeServiceClient(cc grpc.ClientConnInterface) IntakeServiceClient {
	return &intakeServiceClient{cc}
}

func (c *intakeServiceClient) Delta(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DeltaRequest, DeltaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntakeService_ServiceDesc.Streams[0], IntakeService_Delta_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DeltaRequest, DeltaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntakeService_DeltaClient = grpc.ClientStreamingClient[DeltaRequest, DeltaResponse]

// IntakeServiceServer is the server API for IntakeService service.
// All implementations must embed UnimplementedIntakeServiceServer
// for forward compatibility.
//
// IntakeService is used to create, update, and delete infrastructure graph
// objects. The Service ingests Resources/Relationships from various sources.
// Delta() allows clients to stream in changes to the infrastructure graph.
//
// Objects can have a TTL set, which defines the lifetime of the object.
// It is used to clean up objects in the graph in the event of client failure
// to ensure that the state of the graph represents to most current view of the
// infrastructure. The TTL can be refreshed by sending a "Hearbeat" Delta
// operation containing objects whose TTLs are to be refreshed.
//
// Objects also contain a delta_version that is used to keep track of the state
// of individual objects. The version is set and maintained by the client
// sending Deltas. When sending heartbeat Deltas, to refresh the object, the
// client uses the delta_version of the last known change to the Object.
type IntakeServiceServer interface {
	Delta(grpc.ClientStreamingServer[DeltaRequest, DeltaResponse]) error
	mustEmbedUnimplementedIntakeServiceServer()
}

// UnimplementedIntakeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntakeServiceServer struct{}

func (UnimplementedIntakeServiceServer) Delta(grpc.ClientStreamingServer[DeltaRequest, DeltaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Delta not implemented")
}
func (UnimplementedIntakeServiceServer) mustEmbedUnimplementedIntakeServiceServer() {}
func (UnimplementedIntakeServiceServer) testEmbeddedByValue()                       {}

// UnsafeIntakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntakeServiceServer will
// result in compilation errors.
type UnsafeIntakeServiceServer interface {
	mustEmbedUnimplementedIntakeServiceServer()
}

func RegisterIntakeServiceServer(s grpc.ServiceRegistrar, srv IntakeServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntakeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntakeService_ServiceDesc, srv)
}

func _IntakeService_Delta_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntakeServiceServer).Delta(&grpc.GenericServerStream[DeltaRequest, DeltaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntakeService_DeltaServer = grpc.ClientStreamingServer[DeltaRequest, DeltaResponse]

// IntakeService_ServiceDesc is the grpc.ServiceDesc for IntakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.resource.v1.IntakeService",
	HandlerType: (*IntakeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Delta",
			Handler:       _IntakeService_Delta_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service/resource/v1/intake.proto",
}
