// Copyright Antimetal, Inc. All rights reserved.
//
// Use of this source code is governed by a source available license that can be found in the
// LICENSE file or at:
// https://polyformproject.org/wp-content/uploads/2020/06/PolyForm-Shield-1.0.0.txt

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: hardware/v1/hardware.proto

package hardwarev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SystemNode represents the root hardware node for a physical or virtual machine
type SystemNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hostname of the system
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Architecture (e.g., x86_64, arm64)
	Architecture string `protobuf:"bytes,2,opt,name=architecture,proto3" json:"architecture,omitempty"`
	// Boot time of the system
	BootTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	// Kernel version
	KernelVersion string `protobuf:"bytes,4,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// Operating system information
	OsInfo        string `protobuf:"bytes,5,opt,name=os_info,json=osInfo,proto3" json:"os_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemNode) Reset() {
	*x = SystemNode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemNode) ProtoMessage() {}

func (x *SystemNode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemNode.ProtoReflect.Descriptor instead.
func (*SystemNode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{0}
}

func (x *SystemNode) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *SystemNode) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *SystemNode) GetBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BootTime
	}
	return nil
}

func (x *SystemNode) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *SystemNode) GetOsInfo() string {
	if x != nil {
		return x.OsInfo
	}
	return ""
}

// CPUPackageNode represents a physical CPU socket/package
type CPUPackageNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Socket ID (physical package ID)
	SocketId int32 `protobuf:"varint,1,opt,name=socket_id,json=socketId,proto3" json:"socket_id,omitempty"`
	// Vendor ID (e.g., GenuineIntel, AuthenticAMD)
	VendorId string `protobuf:"bytes,2,opt,name=vendor_id,json=vendorId,proto3" json:"vendor_id,omitempty"`
	// Model name (e.g., Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz)
	ModelName string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// CPU family
	CpuFamily int32 `protobuf:"varint,4,opt,name=cpu_family,json=cpuFamily,proto3" json:"cpu_family,omitempty"`
	// Model number
	Model int32 `protobuf:"varint,5,opt,name=model,proto3" json:"model,omitempty"`
	// Stepping
	Stepping int32 `protobuf:"varint,6,opt,name=stepping,proto3" json:"stepping,omitempty"`
	// Microcode version
	Microcode string `protobuf:"bytes,7,opt,name=microcode,proto3" json:"microcode,omitempty"`
	// Cache size
	CacheSize string `protobuf:"bytes,8,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
	// Number of physical cores in this package
	PhysicalCores int32 `protobuf:"varint,9,opt,name=physical_cores,json=physicalCores,proto3" json:"physical_cores,omitempty"`
	// Number of logical cores (with hyperthreading)
	LogicalCores  int32 `protobuf:"varint,10,opt,name=logical_cores,json=logicalCores,proto3" json:"logical_cores,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPUPackageNode) Reset() {
	*x = CPUPackageNode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUPackageNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUPackageNode) ProtoMessage() {}

func (x *CPUPackageNode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUPackageNode.ProtoReflect.Descriptor instead.
func (*CPUPackageNode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{1}
}

func (x *CPUPackageNode) GetSocketId() int32 {
	if x != nil {
		return x.SocketId
	}
	return 0
}

func (x *CPUPackageNode) GetVendorId() string {
	if x != nil {
		return x.VendorId
	}
	return ""
}

func (x *CPUPackageNode) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CPUPackageNode) GetCpuFamily() int32 {
	if x != nil {
		return x.CpuFamily
	}
	return 0
}

func (x *CPUPackageNode) GetModel() int32 {
	if x != nil {
		return x.Model
	}
	return 0
}

func (x *CPUPackageNode) GetStepping() int32 {
	if x != nil {
		return x.Stepping
	}
	return 0
}

func (x *CPUPackageNode) GetMicrocode() string {
	if x != nil {
		return x.Microcode
	}
	return ""
}

func (x *CPUPackageNode) GetCacheSize() string {
	if x != nil {
		return x.CacheSize
	}
	return ""
}

func (x *CPUPackageNode) GetPhysicalCores() int32 {
	if x != nil {
		return x.PhysicalCores
	}
	return 0
}

func (x *CPUPackageNode) GetLogicalCores() int32 {
	if x != nil {
		return x.LogicalCores
	}
	return 0
}

// CPUCoreNode represents an individual CPU core
type CPUCoreNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Processor ID (logical CPU number)
	ProcessorId int32 `protobuf:"varint,1,opt,name=processor_id,json=processorId,proto3" json:"processor_id,omitempty"`
	// Physical core ID
	CoreId int32 `protobuf:"varint,2,opt,name=core_id,json=coreId,proto3" json:"core_id,omitempty"`
	// Physical package ID this core belongs to
	PhysicalId int32 `protobuf:"varint,3,opt,name=physical_id,json=physicalId,proto3" json:"physical_id,omitempty"`
	// Current frequency in MHz
	FrequencyMhz float64 `protobuf:"fixed64,4,opt,name=frequency_mhz,json=frequencyMhz,proto3" json:"frequency_mhz,omitempty"`
	// Number of sibling threads
	Siblings      int32 `protobuf:"varint,5,opt,name=siblings,proto3" json:"siblings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CPUCoreNode) Reset() {
	*x = CPUCoreNode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUCoreNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUCoreNode) ProtoMessage() {}

func (x *CPUCoreNode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUCoreNode.ProtoReflect.Descriptor instead.
func (*CPUCoreNode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{2}
}

func (x *CPUCoreNode) GetProcessorId() int32 {
	if x != nil {
		return x.ProcessorId
	}
	return 0
}

func (x *CPUCoreNode) GetCoreId() int32 {
	if x != nil {
		return x.CoreId
	}
	return 0
}

func (x *CPUCoreNode) GetPhysicalId() int32 {
	if x != nil {
		return x.PhysicalId
	}
	return 0
}

func (x *CPUCoreNode) GetFrequencyMhz() float64 {
	if x != nil {
		return x.FrequencyMhz
	}
	return 0
}

func (x *CPUCoreNode) GetSiblings() int32 {
	if x != nil {
		return x.Siblings
	}
	return 0
}

// NUMANode represents a NUMA memory node
type NUMANode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NUMA node ID
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Total memory in bytes for this NUMA node
	TotalBytes uint64 `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// CPUs assigned to this NUMA node
	Cpus []int32 `protobuf:"varint,3,rep,packed,name=cpus,proto3" json:"cpus,omitempty"`
	// Distance to other NUMA nodes
	Distances     []int32 `protobuf:"varint,4,rep,packed,name=distances,proto3" json:"distances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NUMANode) Reset() {
	*x = NUMANode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NUMANode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NUMANode) ProtoMessage() {}

func (x *NUMANode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NUMANode.ProtoReflect.Descriptor instead.
func (*NUMANode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{3}
}

func (x *NUMANode) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NUMANode) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *NUMANode) GetCpus() []int32 {
	if x != nil {
		return x.Cpus
	}
	return nil
}

func (x *NUMANode) GetDistances() []int32 {
	if x != nil {
		return x.Distances
	}
	return nil
}

// MemoryModuleNode represents system memory configuration
type MemoryModuleNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total system memory in bytes
	TotalBytes uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	// Whether NUMA is enabled
	NumaEnabled bool `protobuf:"varint,2,opt,name=numa_enabled,json=numaEnabled,proto3" json:"numa_enabled,omitempty"`
	// Whether NUMA balancing is available
	NumaBalancingAvailable bool `protobuf:"varint,3,opt,name=numa_balancing_available,json=numaBalancingAvailable,proto3" json:"numa_balancing_available,omitempty"`
	// Number of NUMA nodes
	NumaNodeCount int32 `protobuf:"varint,4,opt,name=numa_node_count,json=numaNodeCount,proto3" json:"numa_node_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryModuleNode) Reset() {
	*x = MemoryModuleNode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryModuleNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryModuleNode) ProtoMessage() {}

func (x *MemoryModuleNode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryModuleNode.ProtoReflect.Descriptor instead.
func (*MemoryModuleNode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{4}
}

func (x *MemoryModuleNode) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *MemoryModuleNode) GetNumaEnabled() bool {
	if x != nil {
		return x.NumaEnabled
	}
	return false
}

func (x *MemoryModuleNode) GetNumaBalancingAvailable() bool {
	if x != nil {
		return x.NumaBalancingAvailable
	}
	return false
}

func (x *MemoryModuleNode) GetNumaNodeCount() int32 {
	if x != nil {
		return x.NumaNodeCount
	}
	return 0
}

// DiskDeviceNode represents a physical storage device
type DiskDeviceNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Device name (e.g., sda, nvme0n1)
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Model name
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Vendor/manufacturer
	Vendor string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Size in bytes
	SizeBytes uint64 `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Whether it's a rotational disk (HDD) or not (SSD)
	Rotational bool `protobuf:"varint,5,opt,name=rotational,proto3" json:"rotational,omitempty"`
	// Logical block size
	BlockSize uint32 `protobuf:"varint,6,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// Physical block size
	PhysicalBlockSize uint32 `protobuf:"varint,7,opt,name=physical_block_size,json=physicalBlockSize,proto3" json:"physical_block_size,omitempty"`
	// I/O scheduler
	Scheduler string `protobuf:"bytes,8,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// Queue depth
	QueueDepth    uint32 `protobuf:"varint,9,opt,name=queue_depth,json=queueDepth,proto3" json:"queue_depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskDeviceNode) Reset() {
	*x = DiskDeviceNode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskDeviceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskDeviceNode) ProtoMessage() {}

func (x *DiskDeviceNode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskDeviceNode.ProtoReflect.Descriptor instead.
func (*DiskDeviceNode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{5}
}

func (x *DiskDeviceNode) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskDeviceNode) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DiskDeviceNode) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DiskDeviceNode) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *DiskDeviceNode) GetRotational() bool {
	if x != nil {
		return x.Rotational
	}
	return false
}

func (x *DiskDeviceNode) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *DiskDeviceNode) GetPhysicalBlockSize() uint32 {
	if x != nil {
		return x.PhysicalBlockSize
	}
	return 0
}

func (x *DiskDeviceNode) GetScheduler() string {
	if x != nil {
		return x.Scheduler
	}
	return ""
}

func (x *DiskDeviceNode) GetQueueDepth() uint32 {
	if x != nil {
		return x.QueueDepth
	}
	return 0
}

// DiskPartitionNode represents a disk partition
type DiskPartitionNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Partition name (e.g., sda1, nvme0n1p1)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Parent device name
	ParentDevice string `protobuf:"bytes,2,opt,name=parent_device,json=parentDevice,proto3" json:"parent_device,omitempty"`
	// Size in bytes
	SizeBytes uint64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Starting sector
	StartSector   uint64 `protobuf:"varint,4,opt,name=start_sector,json=startSector,proto3" json:"start_sector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskPartitionNode) Reset() {
	*x = DiskPartitionNode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskPartitionNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPartitionNode) ProtoMessage() {}

func (x *DiskPartitionNode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPartitionNode.ProtoReflect.Descriptor instead.
func (*DiskPartitionNode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{6}
}

func (x *DiskPartitionNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiskPartitionNode) GetParentDevice() string {
	if x != nil {
		return x.ParentDevice
	}
	return ""
}

func (x *DiskPartitionNode) GetSizeBytes() uint64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *DiskPartitionNode) GetStartSector() uint64 {
	if x != nil {
		return x.StartSector
	}
	return 0
}

// NetworkInterfaceNode represents a network adapter
type NetworkInterfaceNode struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Interface name (e.g., eth0, wlan0)
	Interface string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`
	// MAC address
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Link speed in Mbps
	Speed uint64 `protobuf:"varint,3,opt,name=speed,proto3" json:"speed,omitempty"`
	// Duplex mode (full, half)
	Duplex string `protobuf:"bytes,4,opt,name=duplex,proto3" json:"duplex,omitempty"`
	// Maximum transmission unit
	Mtu uint32 `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Driver name
	Driver string `protobuf:"bytes,6,opt,name=driver,proto3" json:"driver,omitempty"`
	// Interface type (ethernet, wireless, loopback, virtual, etc.)
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// Operational state
	OperState string `protobuf:"bytes,8,opt,name=oper_state,json=operState,proto3" json:"oper_state,omitempty"`
	// Carrier status
	Carrier       bool `protobuf:"varint,9,opt,name=carrier,proto3" json:"carrier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInterfaceNode) Reset() {
	*x = NetworkInterfaceNode{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterfaceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceNode) ProtoMessage() {}

func (x *NetworkInterfaceNode) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceNode.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceNode) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkInterfaceNode) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *NetworkInterfaceNode) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterfaceNode) GetSpeed() uint64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *NetworkInterfaceNode) GetDuplex() string {
	if x != nil {
		return x.Duplex
	}
	return ""
}

func (x *NetworkInterfaceNode) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *NetworkInterfaceNode) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *NetworkInterfaceNode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkInterfaceNode) GetOperState() string {
	if x != nil {
		return x.OperState
	}
	return ""
}

func (x *NetworkInterfaceNode) GetCarrier() bool {
	if x != nil {
		return x.Carrier
	}
	return false
}

// ContainsPredicate represents hierarchical containment relationship
type ContainsPredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of containment (physical, logical, partition)
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainsPredicate) Reset() {
	*x = ContainsPredicate{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainsPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainsPredicate) ProtoMessage() {}

func (x *ContainsPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainsPredicate.ProtoReflect.Descriptor instead.
func (*ContainsPredicate) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{8}
}

func (x *ContainsPredicate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// NUMAAffinityPredicate represents NUMA node affinity
type NUMAAffinityPredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NUMA node ID
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Distance metric (for NUMA distance relationships)
	Distance      int32 `protobuf:"varint,2,opt,name=distance,proto3" json:"distance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NUMAAffinityPredicate) Reset() {
	*x = NUMAAffinityPredicate{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NUMAAffinityPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NUMAAffinityPredicate) ProtoMessage() {}

func (x *NUMAAffinityPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NUMAAffinityPredicate.ProtoReflect.Descriptor instead.
func (*NUMAAffinityPredicate) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{9}
}

func (x *NUMAAffinityPredicate) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *NUMAAffinityPredicate) GetDistance() int32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

// SocketSharingPredicate represents CPU cores sharing a physical socket
type SocketSharingPredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Physical package ID
	PhysicalId int32 `protobuf:"varint,1,opt,name=physical_id,json=physicalId,proto3" json:"physical_id,omitempty"`
	// Socket ID
	SocketId      int32 `protobuf:"varint,2,opt,name=socket_id,json=socketId,proto3" json:"socket_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SocketSharingPredicate) Reset() {
	*x = SocketSharingPredicate{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocketSharingPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketSharingPredicate) ProtoMessage() {}

func (x *SocketSharingPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketSharingPredicate.ProtoReflect.Descriptor instead.
func (*SocketSharingPredicate) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{10}
}

func (x *SocketSharingPredicate) GetPhysicalId() int32 {
	if x != nil {
		return x.PhysicalId
	}
	return 0
}

func (x *SocketSharingPredicate) GetSocketId() int32 {
	if x != nil {
		return x.SocketId
	}
	return 0
}

// BusConnectionPredicate represents hardware bus connections
type BusConnectionPredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bus type (pci, usb, sata, nvme)
	BusType string `protobuf:"bytes,1,opt,name=bus_type,json=busType,proto3" json:"bus_type,omitempty"`
	// Optional bus address
	BusAddress    string `protobuf:"bytes,2,opt,name=bus_address,json=busAddress,proto3" json:"bus_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BusConnectionPredicate) Reset() {
	*x = BusConnectionPredicate{}
	mi := &file_hardware_v1_hardware_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusConnectionPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusConnectionPredicate) ProtoMessage() {}

func (x *BusConnectionPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_hardware_v1_hardware_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusConnectionPredicate.ProtoReflect.Descriptor instead.
func (*BusConnectionPredicate) Descriptor() ([]byte, []int) {
	return file_hardware_v1_hardware_proto_rawDescGZIP(), []int{11}
}

func (x *BusConnectionPredicate) GetBusType() string {
	if x != nil {
		return x.BusType
	}
	return ""
}

func (x *BusConnectionPredicate) GetBusAddress() string {
	if x != nil {
		return x.BusAddress
	}
	return ""
}

var File_hardware_v1_hardware_proto protoreflect.FileDescriptor

const file_hardware_v1_hardware_proto_rawDesc = "" +
	"\n" +
	"\x1ahardware/v1/hardware.proto\x12\vhardware.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc5\x01\n" +
	"\n" +
	"SystemNode\x12\x1a\n" +
	"\bhostname\x18\x01 \x01(\tR\bhostname\x12\"\n" +
	"\farchitecture\x18\x02 \x01(\tR\farchitecture\x127\n" +
	"\tboot_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bbootTime\x12%\n" +
	"\x0ekernel_version\x18\x04 \x01(\tR\rkernelVersion\x12\x17\n" +
	"\aos_info\x18\x05 \x01(\tR\x06osInfo\"\xc3\x02\n" +
	"\x0eCPUPackageNode\x12\x1b\n" +
	"\tsocket_id\x18\x01 \x01(\x05R\bsocketId\x12\x1b\n" +
	"\tvendor_id\x18\x02 \x01(\tR\bvendorId\x12\x1d\n" +
	"\n" +
	"model_name\x18\x03 \x01(\tR\tmodelName\x12\x1d\n" +
	"\n" +
	"cpu_family\x18\x04 \x01(\x05R\tcpuFamily\x12\x14\n" +
	"\x05model\x18\x05 \x01(\x05R\x05model\x12\x1a\n" +
	"\bstepping\x18\x06 \x01(\x05R\bstepping\x12\x1c\n" +
	"\tmicrocode\x18\a \x01(\tR\tmicrocode\x12\x1d\n" +
	"\n" +
	"cache_size\x18\b \x01(\tR\tcacheSize\x12%\n" +
	"\x0ephysical_cores\x18\t \x01(\x05R\rphysicalCores\x12#\n" +
	"\rlogical_cores\x18\n" +
	" \x01(\x05R\flogicalCores\"\xab\x01\n" +
	"\vCPUCoreNode\x12!\n" +
	"\fprocessor_id\x18\x01 \x01(\x05R\vprocessorId\x12\x17\n" +
	"\acore_id\x18\x02 \x01(\x05R\x06coreId\x12\x1f\n" +
	"\vphysical_id\x18\x03 \x01(\x05R\n" +
	"physicalId\x12#\n" +
	"\rfrequency_mhz\x18\x04 \x01(\x01R\ffrequencyMhz\x12\x1a\n" +
	"\bsiblings\x18\x05 \x01(\x05R\bsiblings\"v\n" +
	"\bNUMANode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\x05R\x06nodeId\x12\x1f\n" +
	"\vtotal_bytes\x18\x02 \x01(\x04R\n" +
	"totalBytes\x12\x12\n" +
	"\x04cpus\x18\x03 \x03(\x05R\x04cpus\x12\x1c\n" +
	"\tdistances\x18\x04 \x03(\x05R\tdistances\"\xb8\x01\n" +
	"\x10MemoryModuleNode\x12\x1f\n" +
	"\vtotal_bytes\x18\x01 \x01(\x04R\n" +
	"totalBytes\x12!\n" +
	"\fnuma_enabled\x18\x02 \x01(\bR\vnumaEnabled\x128\n" +
	"\x18numa_balancing_available\x18\x03 \x01(\bR\x16numaBalancingAvailable\x12&\n" +
	"\x0fnuma_node_count\x18\x04 \x01(\x05R\rnumaNodeCount\"\xa3\x02\n" +
	"\x0eDiskDeviceNode\x12\x16\n" +
	"\x06device\x18\x01 \x01(\tR\x06device\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x12\x16\n" +
	"\x06vendor\x18\x03 \x01(\tR\x06vendor\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x04 \x01(\x04R\tsizeBytes\x12\x1e\n" +
	"\n" +
	"rotational\x18\x05 \x01(\bR\n" +
	"rotational\x12\x1d\n" +
	"\n" +
	"block_size\x18\x06 \x01(\rR\tblockSize\x12.\n" +
	"\x13physical_block_size\x18\a \x01(\rR\x11physicalBlockSize\x12\x1c\n" +
	"\tscheduler\x18\b \x01(\tR\tscheduler\x12\x1f\n" +
	"\vqueue_depth\x18\t \x01(\rR\n" +
	"queueDepth\"\x8e\x01\n" +
	"\x11DiskPartitionNode\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12#\n" +
	"\rparent_device\x18\x02 \x01(\tR\fparentDevice\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x03 \x01(\x04R\tsizeBytes\x12!\n" +
	"\fstart_sector\x18\x04 \x01(\x04R\vstartSector\"\xfa\x01\n" +
	"\x14NetworkInterfaceNode\x12\x1c\n" +
	"\tinterface\x18\x01 \x01(\tR\tinterface\x12\x1f\n" +
	"\vmac_address\x18\x02 \x01(\tR\n" +
	"macAddress\x12\x14\n" +
	"\x05speed\x18\x03 \x01(\x04R\x05speed\x12\x16\n" +
	"\x06duplex\x18\x04 \x01(\tR\x06duplex\x12\x10\n" +
	"\x03mtu\x18\x05 \x01(\rR\x03mtu\x12\x16\n" +
	"\x06driver\x18\x06 \x01(\tR\x06driver\x12\x12\n" +
	"\x04type\x18\a \x01(\tR\x04type\x12\x1d\n" +
	"\n" +
	"oper_state\x18\b \x01(\tR\toperState\x12\x18\n" +
	"\acarrier\x18\t \x01(\bR\acarrier\"'\n" +
	"\x11ContainsPredicate\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\"L\n" +
	"\x15NUMAAffinityPredicate\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\x05R\x06nodeId\x12\x1a\n" +
	"\bdistance\x18\x02 \x01(\x05R\bdistance\"V\n" +
	"\x16SocketSharingPredicate\x12\x1f\n" +
	"\vphysical_id\x18\x01 \x01(\x05R\n" +
	"physicalId\x12\x1b\n" +
	"\tsocket_id\x18\x02 \x01(\x05R\bsocketId\"T\n" +
	"\x16BusConnectionPredicate\x12\x19\n" +
	"\bbus_type\x18\x01 \x01(\tR\abusType\x12\x1f\n" +
	"\vbus_address\x18\x02 \x01(\tR\n" +
	"busAddressB\xa8\x01\n" +
	"\x0fcom.hardware.v1B\rHardwareProtoP\x01Z9github.com/antimetal/agent/pkg/api/hardware/v1;hardwarev1\xa2\x02\x03HXX\xaa\x02\vHardware.V1\xca\x02\vHardware\\V1\xe2\x02\x17Hardware\\V1\\GPBMetadata\xea\x02\fHardware::V1b\x06proto3"

var (
	file_hardware_v1_hardware_proto_rawDescOnce sync.Once
	file_hardware_v1_hardware_proto_rawDescData []byte
)

func file_hardware_v1_hardware_proto_rawDescGZIP() []byte {
	file_hardware_v1_hardware_proto_rawDescOnce.Do(func() {
		file_hardware_v1_hardware_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_hardware_v1_hardware_proto_rawDesc), len(file_hardware_v1_hardware_proto_rawDesc)))
	})
	return file_hardware_v1_hardware_proto_rawDescData
}

var file_hardware_v1_hardware_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_hardware_v1_hardware_proto_goTypes = []any{
	(*SystemNode)(nil),             // 0: hardware.v1.SystemNode
	(*CPUPackageNode)(nil),         // 1: hardware.v1.CPUPackageNode
	(*CPUCoreNode)(nil),            // 2: hardware.v1.CPUCoreNode
	(*NUMANode)(nil),               // 3: hardware.v1.NUMANode
	(*MemoryModuleNode)(nil),       // 4: hardware.v1.MemoryModuleNode
	(*DiskDeviceNode)(nil),         // 5: hardware.v1.DiskDeviceNode
	(*DiskPartitionNode)(nil),      // 6: hardware.v1.DiskPartitionNode
	(*NetworkInterfaceNode)(nil),   // 7: hardware.v1.NetworkInterfaceNode
	(*ContainsPredicate)(nil),      // 8: hardware.v1.ContainsPredicate
	(*NUMAAffinityPredicate)(nil),  // 9: hardware.v1.NUMAAffinityPredicate
	(*SocketSharingPredicate)(nil), // 10: hardware.v1.SocketSharingPredicate
	(*BusConnectionPredicate)(nil), // 11: hardware.v1.BusConnectionPredicate
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
}
var file_hardware_v1_hardware_proto_depIdxs = []int32{
	12, // 0: hardware.v1.SystemNode.boot_time:type_name -> google.protobuf.Timestamp
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_hardware_v1_hardware_proto_init() }
func file_hardware_v1_hardware_proto_init() {
	if File_hardware_v1_hardware_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_hardware_v1_hardware_proto_rawDesc), len(file_hardware_v1_hardware_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hardware_v1_hardware_proto_goTypes,
		DependencyIndexes: file_hardware_v1_hardware_proto_depIdxs,
		MessageInfos:      file_hardware_v1_hardware_proto_msgTypes,
	}.Build()
	File_hardware_v1_hardware_proto = out.File
	file_hardware_v1_hardware_proto_goTypes = nil
	file_hardware_v1_hardware_proto_depIdxs = nil
}
